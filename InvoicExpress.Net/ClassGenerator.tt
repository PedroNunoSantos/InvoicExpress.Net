<#@ template debug="true" hostSpecific="true" language="C#" #> 
<#@ include file="$(SolutionDir)T4\MultipleOutputHelper.ttinclude" #>
<#@ assembly name="System.Xml, Version=4.0.0.0" #>
<#@ import namespace="System.CodeDom" #>
<#@ import namespace="System.CodeDom.Compiler" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Xml.Schema" #>
<#@ import namespace="System.Xml.Serialization" #>
<#@ import namespace="Microsoft.CSharp" #>
//generated at : <#= DateTime.Now.ToString(CultureInfo.InvariantCulture) #>
<#
    string templateDir = Path.GetDirectoryName(Host.TemplateFile);
    string xmlTemplate = Path.Combine(templateDir, "InvoiceExpress.xml");
    if (!File.Exists(xmlTemplate))
        return string.Empty;

    var xml = DeserializeXml<MasterClass>(File.ReadAllText(xmlTemplate, Encoding.Default));
    Manager manager = Manager.Create(Host, GenerationEnvironment);
    foreach (MasterClassNestedClass nested in xml.NestedClass)
    {
        GenerateInputOutputClasses(manager, nested);
        GenerateMethods(manager, nested);
    }
    manager.Process(true);
#>
<#+
    private const string BaseNamespace = "InvoicExpress.Net";
    private void GenerateInputOutputClasses(Manager m, MasterClassNestedClass data)
    {
        foreach (MasterClassNestedClassMethod method in data.Method)
        {
            Action<string, string, string> createClassFile = (nameSpace, fileName, xml) =>
            {
				string xsd = XmlToXsd(xml);
				m.StartNewFile(fileName.Replace(".cs", ".xsd"));
				Write(xsd);
				m.EndBlock();

                string cSharp = XsdToClass(xsd);

                m.StartNewFile(fileName); #>
// This file was automatically generated
// Do not write any custom code here.
<#= string.Format("// {0}", method.ApiUrl) #>
namespace <#=nameSpace #>
{<#+
                PushIndent("\t");
                Write(cSharp);
                PopIndent();
#>}<#+
                m.EndBlock();
            };

            if (!string.IsNullOrEmpty(method.InputData))
            {
                string inputNameSpace = string.Format("{0}.I.{1}.{2}", BaseNamespace, data.Name, method.Name);
                string fileName = string.Format("I.{0}.{1}.g.cs", data.Name, method.Name);
                createClassFile(inputNameSpace, fileName,
                    method.InputData);
            }
            if (!string.IsNullOrEmpty(method.ReturnData))
            {
                string returnNameSpace = string.Format("{0}.R.{1}.{2}", BaseNamespace, data.Name, method.Name);
                string fileName = string.Format("R.{0}.{1}.g.cs", data.Name, method.Name);
                createClassFile(returnNameSpace, fileName,
                    method.ReturnData);
            }
        }
    }

	private void GenerateMethods(Manager m, MasterClassNestedClass api)
	{
	    m.StartNewFile(string.Format("{0}.g.cs", api.Name));
#>
using System;
using System.Net;
namespace <#=BaseNamespace #>
{
	public static partial class InvoiceExpress
    {
		public static class <#= api.Name #>
		{
	<#+
	    foreach (MasterClassNestedClassMethod mtd in api.Method)
	    {
	        string inputNameSpace = string.Format("I.{0}.{1}", api.Name, mtd.Name);
	        string returnNameSpace = string.Format("R.{0}.{1}", api.Name, mtd.Name);

	        UrlParmsHelper u = BuildParameters(mtd, inputNameSpace);
	        //string inputClassName = string.Format("{0}.{1}", inputNameSpace, u.InputClassName);
	        string returnClassName = u.ReturnClassName == "void"
	            ? u.ReturnClassName
	            : string.Format("{0}.{1}", returnNameSpace, u.ReturnClassName); #>	        
			/// <summary>
			/// InvoiceExpress <a href="<#= mtd.ApiUrl ?? "" #>"><#=api.Name #> <#=mtd.Name #></a> Method
			/// </summary>
			public static string <#=mtd.Name #>(<#=u.MethodSignatureStr #>)
			{
				string url = <#= u.UrlStringFormat #>;
				var result = url.Http<#= GetHttpMethod(mtd.HttpMethod) #>(<#= (u.HasInput ? "inputData" : "")#>);
				if((int)result.StatusCode != <#=mtd.SucessCode #>)
					throw new System.Exception(string.Format("Invalid HttpStatusCode. Expected {0}", (HttpStatusCode)<#=mtd.SucessCode #>)
						,new Exception(result.Text));
				return result.Text;
			}

			/// <summary>
			/// InvoiceExpress <a href="<#= mtd.ApiUrl ?? "" #>"><#=api.Name #> <#=mtd.Name #></a> Method
			/// </summary>
			public static <#=returnClassName #> <#=mtd.Name #>Typed(<#=u.MethodCallStr #>)
			{
			<#+
	        string deserializePart = u.HasReturn ? string.Format(".DeserializeXml<{0}>()", returnClassName) : string.Empty;
	        string returnPart = u.HasReturn ? "return " : string.Empty;

	        Write("\t");
	        WriteLine(u.HasInput
	            ? string.Format("{0}{1}({2}{3}inputData.XmlSerializeToString()){4};", returnPart, mtd.Name,
	                u.MethodCallParameters, string.IsNullOrEmpty(u.MethodCallParameters) ? "" : ", ", deserializePart)
	            : string.Format("{0}{1}({2}){3};", returnPart, mtd.Name, u.MethodCallParameters, deserializePart));
	        #>
			}
		<#+
	    }
		#>
		}
	}
}<#+
	    m.EndBlock();
	}

    private class UrlParmsHelper
    {
        public string UrlStringFormat { get; set; }
        public bool HasInput { get; set; }
        public bool HasReturn { get; set; }
        public string InputClassName { get; set; }
        public string ReturnClassName { get; set; }
        public string MethodSignatureStr { get; set; }
        public string MethodCallStr { get; set; }
        public string MethodCallParameters { get; set; }
    }

    private string GetHttpMethod(string httpMethod)
    {
        switch (httpMethod.ToLower())
        {
            case "get":
                return "Get";
            case "post":
                return "Post";
            case "create":
                return "Create";
            case "put":
                return "Put";
            case "delete":
                return "Delete";
            default:
                throw new ArgumentOutOfRangeException("httpMethod");
        }
    }

    private UrlParmsHelper BuildParameters(MasterClassNestedClassMethod m, string ns)
    {
        string maskedUrl = m.Url;
        var up = new UrlParmsHelper();

        up.HasInput = !string.IsNullOrEmpty(m.InputData);
        up.InputClassName = up.HasInput ? XDocument.Parse(m.InputData).Root.Name.LocalName : "";

        up.HasReturn = !string.IsNullOrEmpty(m.ReturnData);
        up.ReturnClassName = up.HasReturn ? XDocument.Parse(m.ReturnData).Root.Name.LocalName : "void";

        var sbUrlStringFormat = new StringBuilder();
        var sbParameters = new StringBuilder();
        var sbMethodCall = new StringBuilder();

        if (m.UrlParms != null)
        {
            foreach (MasterClassNestedClassMethodParam p in m.UrlParms.OrderBy(p => p.Index))
            {
                maskedUrl = maskedUrl.Replace(string.Format("{{{0}}}", p.Name), string.Format("{{{0}}}", p.Index));
                sbUrlStringFormat.Append(string.Format(", {0}", p.Name));
                sbParameters.Append(sbParameters.Length > 0
                    ? string.Format(", {0} {1}", p.Type, p.Name)
                    : string.Format("{0} {1}", p.Type, p.Name));
				
				//sbParameters.Append(sbParameters.Length > 0
                //    ? string.Format(", {0} {1}{2}", p.Type, p.Name, string.IsNullOrEmpty(p.DefaultValue) ? "" : " = " + p.DefaultValue)
                //    : string.Format("{0} {1}{2}", p.Type, p.Name, string.IsNullOrEmpty(p.DefaultValue) ? "" : " = " + p.DefaultValue));

                

                sbMethodCall.Append(sbMethodCall.Length > 0
                    ? string.Format(", {0}", p.Name)
                    : string.Format("{0}", p.Name));
            }
        }

        string str1 = sbParameters.ToString();
        string str2 = str1;
        if (m.InputData != null)
        {
            str1 = str1 + (str1.Length > 0 ? ", string inputData" : "string inputData");
            str2 = str2 + (str2.Length > 0
                ? string.Format(", {0}.{1} inputData", ns, up.InputClassName)
                : string.Format("{0}.{1} inputData", ns, up.InputClassName));
        }

        up.UrlStringFormat = string.Format("string.Format(\"{0}\"{1})", maskedUrl, sbUrlStringFormat);
        up.MethodSignatureStr = str1;
        up.MethodCallStr = str2;
        up.MethodCallParameters = sbMethodCall.ToString();
        return up;
    }

    private static T DeserializeXml<T>(string objectData)
    {
        return (T) DeserializeXml(objectData, typeof(T));
    }

    private static object DeserializeXml(string objectData, Type type)
    {
        var serializer = new XmlSerializer(type);
        object result;

        using (var reader = new StringReader(objectData))
            result = serializer.Deserialize(reader);

        return result;
    }

    private static string XmlToXsd(string xml)
    {
        if (string.IsNullOrEmpty(xml))
            return null;

        using (var rd = new StringReader(xml))
        using (XmlReader xmlReader = XmlReader.Create(rd))
        {
            //var schemaSet = new XmlSchemaSet();
            var schemaInfer = new XmlSchemaInference();
            XmlSchemaSet schemaSet = schemaInfer.InferSchema(xmlReader);
            var sb = new StringBuilder();

            foreach (XmlSchema schema in schemaSet.Schemas())
            {
                using (var stringWriter = new StringWriter())
                using (XmlWriter writer = XmlWriter.Create(stringWriter))
                {
                    schema.Write(writer);
                    sb.Append(stringWriter);
                }
            }
            return sb.ToString();
        }
    }

    private string XsdToClass(string xsdStr, string nameSpace = "")
    {
        XmlSchema xsd = XmlSchema.Read(new StringReader(xsdStr), null);

        var xsds = new XmlSchemas();
        xsds.Add(xsd);
        xsds.Compile(null, true);
        var schemaImporter = new XmlSchemaImporter(xsds);

        // create the codedom
        var ns = new System.CodeDom.CodeNamespace(nameSpace);
        var codeExporter = new XmlCodeExporter(ns);

        var maps = new List<XmlTypeMapping>();
        foreach (XmlSchemaType schemaType in xsd.SchemaTypes.Values)
            maps.Add(schemaImporter.ImportSchemaType(schemaType.QualifiedName));

        foreach (XmlSchemaElement schemaElement in xsd.Elements.Values)
            maps.Add(schemaImporter.ImportTypeMapping(schemaElement.QualifiedName));

        foreach (XmlTypeMapping map in maps)
            codeExporter.ExportTypeMapping(map);

        RemoveAttributes(ns);
        CodeGenerator.ValidateIdentifiers(ns);

        // output the C# code
        using (var csharp = new CSharpCodeProvider())
        using (var wr = new StringWriter())
        {
            var opts = new CodeGeneratorOptions();
            opts.BlankLinesBetweenMembers = false;
            csharp.GenerateCodeFromNamespace(ns, wr, opts);
            return wr.GetStringBuilder().ToString();
        }
    }

    private void RemoveAttributes(System.CodeDom.CodeNamespace codeNamespace)
    {
        foreach (CodeTypeDeclaration codeType in codeNamespace.Types)
        {
            CodeAttributeDeclaration xmlTypeAttribute = null;
            foreach (CodeAttributeDeclaration codeAttribute in codeType.CustomAttributes)
            {
                if (codeAttribute.Name == "System.Xml.Serialization.XmlTypeAttribute")
                    xmlTypeAttribute = codeAttribute;
            }
            codeType.CustomAttributes.Clear();
            if (xmlTypeAttribute != null)
                codeType.CustomAttributes.Add(xmlTypeAttribute);
        }
    }

    /* classes geradas diretamente do ficheiro InioiceExpress.xml*/

    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
    public partial class MasterClass
    {
        private MasterClassNestedClass[] nestedClassField;

        private string typeField;

        private string nameField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("NestedClass")]
        public MasterClassNestedClass[] NestedClass
        {
            get { return this.nestedClassField; }
            set { this.nestedClassField = value; }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Type
        {
            get { return this.typeField; }
            set { this.typeField = value; }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name
        {
            get { return this.nameField; }
            set { this.nameField = value; }
        }
    }

    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class MasterClassNestedClass
    {
        private MasterClassNestedClassMethod[] methodField;

        private string nameField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Method")]
        public MasterClassNestedClassMethod[] Method
        {
            get { return this.methodField; }
            set { this.methodField = value; }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name
        {
            get { return this.nameField; }
            set { this.nameField = value; }
        }
    }

    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class MasterClassNestedClassMethod
    {
        private MasterClassNestedClassMethodParam[] urlParmsField;

        private MasterClassNestedClassMethodError[] errorCodesField;

        private string inputDataField;

        private string returnDataField;

        private string nameField;

        private string httpMethodField;

        private string urlField;

        private string apiUrlField;

        private byte sucessCodeField;

        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("Param", IsNullable = false)]
        public MasterClassNestedClassMethodParam[] UrlParms
        {
            get { return this.urlParmsField; }
            set { this.urlParmsField = value; }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("Error", IsNullable = false)]
        public MasterClassNestedClassMethodError[] ErrorCodes
        {
            get { return this.errorCodesField; }
            set { this.errorCodesField = value; }
        }

        /// <remarks/>
        public string InputData
        {
            get { return this.inputDataField; }
            set { this.inputDataField = value; }
        }

        /// <remarks/>
        public string ReturnData
        {
            get { return this.returnDataField; }
            set { this.returnDataField = value; }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name
        {
            get { return this.nameField; }
            set { this.nameField = value; }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string HttpMethod
        {
            get { return this.httpMethodField; }
            set { this.httpMethodField = value; }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Url
        {
            get { return this.urlField; }
            set { this.urlField = value; }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ApiUrl
        {
            get { return this.apiUrlField; }
            set { this.apiUrlField = value; }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public byte SucessCode
        {
            get { return this.sucessCodeField; }
            set { this.sucessCodeField = value; }
        }
    }

    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class MasterClassNestedClassMethodParam
    {
        private byte indexField;

        private string nameField;

        private string typeField;

        private string defaultValueField;

        private bool defaultValueFieldSpecified;

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public byte Index
        {
            get { return this.indexField; }
            set { this.indexField = value; }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name
        {
            get { return this.nameField; }
            set { this.nameField = value; }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Type
        {
            get { return this.typeField; }
            set { this.typeField = value; }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string DefaultValue
        {
            get { return this.defaultValueField; }
            set { this.defaultValueField = value; }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultValueSpecified
        {
            get { return this.defaultValueFieldSpecified; }
            set { this.defaultValueFieldSpecified = value; }
        }
    }

    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class MasterClassNestedClassMethodError
    {
        private ushort codeField;

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ushort Code
        {
            get { return this.codeField; }
            set { this.codeField = value; }
        }
    }

#>
