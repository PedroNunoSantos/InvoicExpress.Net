<#@ assembly name="EnvDTE"#>
<#@ assembly name="EnvDTE80"#>
<#@ assembly name="System.Configuration" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="EnvDTE80" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#+
	/// <summary>
	/// Provides strongly typed access to the hosting EnvDTE.Project and app.config/web.config 
	/// configuration file, if present.
	/// 
	/// Typical usage from T4 template:
	/// <code>ConfigurationAccessor config = new ConfigurationAccessor((IServiceProvider)this.Host);</code>
	/// 
	/// </summary>
	/// <author>Sky Sanders [sky.sanders@gmail.com, http://skysanders.net/subtext]</author>
	/// <date>01-23-10</date>
	/// <copyright>The contents of this file are a Public Domain Dedication.</copyright>
	/// 
	/// NOTE: determine behaviour of ProjectItem.FileNames when referred to a linked file.
	/// 
	public class ConfigurationAccessor
	{
		/// <summary>
		/// Typical usage from T4 template:
		/// <code>ConfigurationAccessor config = new ConfigurationAccessor((IServiceProvider)this.Host);</code>
		/// </summary>
		public ConfigurationAccessor(IServiceProvider host, string projectName = null)
		{
			// Get the instance of Visual Studio that is hosting the calling file
			var env = (DTE) host.GetService(typeof(DTE));

			// Gets an array of currently selected projects. Since you are either in this file saving it or
			// right-clicking the item in solution explorer to invoke the context menu it stands to reason
			// that there is 1 ActiveSolutionProject and that it is the parent of this file....

			IList<Project> projs = Projects(host);
			foreach (Project obj in projs)
			{
				_project = obj;

				string configurationFilename = null;
				if (!string.IsNullOrEmpty(projectName))
					if (!String.Equals(projectName, _project.Name, StringComparison.InvariantCultureIgnoreCase))
						continue;

				// examine each project item's filename looking for app.config or web.config
				foreach (ProjectItem item in _project.ProjectItems)
				{
					Console.WriteLine(item.Name);
					if (!Regex.IsMatch(item.Name, "(app|web).config", RegexOptions.IgnoreCase))
						continue;

					// NOTE: try this with linked files. is the filename pointing to the source?
					configurationFilename = item.FileNames[0];
					break;
				}
				if (string.IsNullOrEmpty(configurationFilename))
					return;
				// found it, map it and expose salient members as properties
				var configFile = new ExeConfigurationFileMap();
				configFile.ExeConfigFilename = configurationFilename;
                _configuration = System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(configFile, ConfigurationUserLevel.None);
			}
		}
		
		public static IList<Project> Projects(IServiceProvider host)
		{
			var env = (DTE) host.GetService(typeof(DTE));
			Projects projects = env.Solution.Projects;
			var list = new List<Project>();
			IEnumerator item = projects.GetEnumerator();
			while (item.MoveNext())
			{
				var project = item.Current as Project;
				if (project == null)
					continue;

				if (project.Kind == ProjectKinds.vsProjectKindSolutionFolder)
					list.AddRange(GetSolutionFolderProjects(project));
				else
					list.Add(project);

			}

			return list;
		}

		private static IEnumerable<Project> GetSolutionFolderProjects(Project solutionFolder)
		{
			var list = new List<Project>();
			for (var i = 1; i <= solutionFolder.ProjectItems.Count; i++)
			{
				Project subProject = solutionFolder.ProjectItems.Item(i).SubProject;
				if (subProject == null)
					continue;
				// If this is another solution folder, do a recursive call, otherwise add
				if (subProject.Kind == ProjectKinds.vsProjectKindSolutionFolder)
					list.AddRange(GetSolutionFolderProjects(subProject));
				else
					list.Add(subProject);
			}
			return list;
		}

		private readonly Project _project;
		private readonly System.Configuration.Configuration _configuration;


		/// <summary>
		/// Provides access to the host project.
		/// </summary>
		/// <remarks>see http://msdn.microsoft.com/en-us/library/envdte.project.aspx</remarks>
		public Project Project => _project;

		/// <summary>
		/// Convenience getter for Project.Properties.
		/// Examples:
		/// <code>string thisAssemblyName = config.Properties.Item("AssemblyName").Value.ToString();</code>
		/// <code>string thisAssemblyName = config.Properties.Item("AssemblyName").Value.ToString();</code>
		/// </summary>
		/// <remarks>see http://msdn.microsoft.com/en-us/library/envdte.project_properties.aspx</remarks>
		public Properties Properties => _project.Properties;

		/// <summary>
		/// Provides access to the application/web configuration file.
		/// </summary>
		/// <remarks>see http://msdn.microsoft.com/en-us/library/system.configuration.configuration.aspx</remarks>
		public System.Configuration.Configuration Configuration => _configuration;

		/// <summary>
		/// Provides access to the appSettings section of the configuration file.
		/// Behavior differs from typical AppSettings usage in that the indexed
		/// item's .Value must be explicitly addressed.
		/// <code>string setting = config.AppSettings["MyAppSetting"].Value;</code>
		/// </summary>
		/// <remarks>see http://msdn.microsoft.com/en-us/library/system.configuration.configuration.appsettings.aspx</remarks>
		public KeyValueConfigurationCollection AppSettings => _configuration.AppSettings?.Settings;

		/// <summary>
		/// Provides access to the connectionStrings section of the configuration file.
		/// Behavior is as expected; items are accessed by string key or integer index.
		/// <code>string northwindProvider = config.ConnectionStrings["northwind"].ProviderName;</code>
		/// </summary>
		/// <remarks>see http://msdn.microsoft.com/en-us/library/system.configuration.configuration.connectionstrings.aspx</remarks>
		public ConnectionStringSettingsCollection ConnectionStrings => _configuration?.ConnectionStrings?.ConnectionStrings;
	}

#>